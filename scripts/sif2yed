#!/usr/bin/python
import sys
if len(sys.argv)==1:
    print("sif2yed siffile1 siffile2 siffile3 ...")
else:
    import copy
    import xml.dom.minidom
    import xml.etree.ElementTree as etree
    for siffile in sys.argv[1:]:
        if not siffile.endswith(".sif"):
            print(siffile+": must be a sif file, skipping")
        else:
            nodes=[]
            edges=[]
            for edge in open(siffile,"rt").read().splitlines():
                if edge.count("\t")!=2:
                    print(siffile+"/"+edge+": must be a 3 columns tsv, skipping")
                else:
                    edge=edge.split("\t")
                    for node in [edge[0],edge[2]]:
                        if node not in nodes:
                            nodes.append(node)
                    edges.append(copy.deepcopy(edge))
            if len(edges)==0:
                print(siffile+": empty, skipping")
            else:
                graphml=etree.Element("graphml",{"xmlns":"http://graphml.graphdrawing.org/xmlns","xmlns:java":"http://www.yworks.com/xml/yfiles-common/1.0/java","xmlns:sys":"http://www.yworks.com/xml/yfiles-common/markup/primitives/2.0","xmlns:x":"http://www.yworks.com/xml/yfiles-common/markup/2.0","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xmlns:y":"http://www.yworks.com/xml/graphml","xmlns:yed":"http://www.yworks.com/xml/yed/3","xsi:schemaLocation":"http://graphml.graphdrawing.org/xmlns http://www.yworks.com/xml/schema/graphml/1.1/ygraphml.xsd"})
                etree.SubElement(graphml,"key",{"for":"node","id":"nodelabel","yfiles.type":"nodegraphics"})
                etree.SubElement(graphml,"key",{"for":"edge","id":"edgelabel","attr.name":"description","attr.type":"string"})
                etree.SubElement(graphml,"key",{"for":"edge","id":"edgesign","yfiles.type":"edgegraphics"})
                graph=etree.SubElement(graphml,"graph",{"id":siffile.split("/")[-1].replace(".sif",""),"edgedefault":"directed"})
                for node in nodes:
                    Node=etree.SubElement(graph,"node",{"id":node})
                    Data=etree.SubElement(Node,"data",{"key":"nodelabel"})
                    ShapeNode=etree.SubElement(Data,"y:ShapeNode")
                    Fill=etree.SubElement(ShapeNode,"y:Fill",{"color":"#FFFFFF"})
                    BorderStyle=etree.SubElement(ShapeNode,"y:BorderStyle",{"hasColor":"false"})
                    NodeLabel=etree.SubElement(ShapeNode,"y:NodeLabel")
                    NodeLabel.text=node
                    Shape=etree.SubElement(ShapeNode,"y:Shape",{"type":"roundrectangle"})
                for edge in edges:
                    if edge[1]=="ACTIVATION":
                        sign="standard"
                        color="#0000FF"
                    elif edge[1]=="INHIBITION":
                        sign="t_shape"
                        color="#FF0000"
                    else:
                        sign="standard"
                        color="#000000"
                    Edge=etree.SubElement(graph,"edge",{"id":edge[0]+"__"+edge[2],"source":edge[0],"target":edge[2]})
                    Data1=etree.SubElement(Edge,"data",{"key":"edgelabel"})
                    Data1.text=edge[1]
                    Data2=etree.SubElement(Edge,"data",{"key":"edgesign"})
                    PolyLineEdge=etree.SubElement(Data2,"y:PolyLineEdge")
                    LineStyle=etree.SubElement(PolyLineEdge,"y:LineStyle",{"color":color})
                    Arrows=etree.SubElement(PolyLineEdge,"y:Arrows",{"source":"none","target":sign})
                open(siffile.replace(".sif",".graphml"),"w").write(xml.dom.minidom.parseString(etree.tostring(graphml)).toprettyxml())
